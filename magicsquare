import random
def generateSquare(n):
    magicSquare = [[0 for x in range(n)] for y in range(n)]
    i, j = 0, 1  # Start position in the middle of the top row
    num = 1
    while num <= (n * n):
        magicSquare[i][j] = num
        next_i, next_j = (i - 1) % n, (j + 1) % n  # Move up and to the right
        if magicSquare[next_i][next_j] != 0:  # If the cell is already filled
            next_i, next_j = (i + 1) % n, j  # Move down instead
        i, j = next_i, next_j
        num += 1
    return magicSquare
def printMagicSquareWithMoves(magicSquare, player_moves, computer_moves, player_symbol, computer_symbol):
    print("Magic Square:")
    for row in magicSquare:
        print(' | '.join(
            f'{player_symbol}' if num in player_moves else
            f'{computer_symbol}' if num in computer_moves else
            f'{num:1}'
            for num in row
        ))
        print('-' * 9)
def checkWin(magicSquare, n, moves):
    magic_constant = n * (n * n + 1) // 2
    for i in range(n):
        if sum(magicSquare[i][j] for j in range(n) if magicSquare[i][j] in moves) == magic_constant:
            return True
        if sum(magicSquare[j][i] for j in range(n) if magicSquare[j][i] in moves) == magic_constant:
            return True
        if sum(magicSquare[i][i] for i in range(n) if magicSquare[i][i] in moves) == magic_constant:
            return True
        if sum(magicSquare[i][n - i - 1] for i in range(n) if magicSquare[i][n - i - 1] in moves) == magic_constant:
            return True
    return False
def findWinningMove(magicSquare, n, moves, available_numbers):
    for number in available_numbers:
        temp_moves = moves + [number]
        if checkWin(magicSquare, n, temp_moves):
            return number
    return None
def getPlayerMove(available_numbers):
    while True:
        try:
            player_move = int(input("Select number from the board: "))      
            if player_move not in available_numbers:
                raise ValueError("Invalid choice. Choose from the available numbers.")
            return player_move
        except ValueError as e:
            print(e)            
def getComputerMove(magicSquare, n, computer_moves, player_moves, available_numbers):
    winning_move = findWinningMove(magicSquare, n, computer_moves, available_numbers)
    if winning_move is not None:
        return winning_move
    blocking_move = findWinningMove(magicSquare, n, player_moves, available_numbers)
    if blocking_move is not None:
        return blocking_move
    return random.choice(available_numbers)
def playGame(magicSquare, n):
    available_numbers = [num for row in magicSquare for num in row]
    player_moves, computer_moves = [], []
    printMagicSquareWithMoves(magicSquare, player_moves, computer_moves, " ", " ")
    # Tossing for the first player
    while True:
        try:
            human_choice = int(input('Select a number "0" or "1" for the toss: '))
            if human_choice not in [0, 1]:
                raise ValueError
            break
        except ValueError:
            print("Invalid choice. Please choose '0' or '1'.")
    toss_result = random.choice([0, 1])
    print('Toss result:', toss_result)
    player_symbol, computer_symbol = ('X', 'O') if human_choice == toss_result else ('O', 'X')
    winner = "Human" if human_choice == toss_result else "Computer"
    print(f"{winner} won the toss!")
    current_player = computer_symbol if human_choice != toss_result else player_symbol  # Start with the winner
    for turn in range(n * n):
        if current_player == player_symbol:
            player_move = getPlayerMove(available_numbers)
            player_moves.append(player_move)
            available_numbers.remove(player_move)
            current_player = computer_symbol  # Switch to computer
        else:
            computer_move = getComputerMove(magicSquare, n, computer_moves, player_moves, available_numbers)
            print(f"Computer's choice: {computer_move}")
            computer_moves.append(computer_move)
            available_numbers.remove(computer_move)
            current_player = player_symbol  # Switch to player
        printMagicSquareWithMoves(magicSquare, player_moves, computer_moves, player_symbol, computer_symbol)
        if checkWin(magicSquare, n, computer_moves):
            print("Computer wins!")
            return
        elif checkWin(magicSquare, n, player_moves):
            print("Player wins!")
            return
    print("It's a draw!")
def main():
    while True:
        magicSquare = generateSquare(3)
        playGame(magicSquare, 3)
        play_again = input("Would you like to play again? (yes/no): ").lower()
        while play_again not in ['yes', 'no']:
            play_again = input('Wrong Choice!! Select "yes" or "no": ').lower()
        if play_again != 'yes':
            print("Thanks for playing!")
            break
main()
